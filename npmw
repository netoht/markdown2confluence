#!/bin/bash

# Node.js wrapper which will download and proxy to node locally.
# This allows you to automatically manage the installed version of node.
#
# CONFIGURATION
# =============
# NODEW_INSTALL_VERSION - an env variable to specify the version of node to install - Defaults to 6.10.3
# NODEW_DIST_BASE_URL - an env variable to specify the binary download location - Defaults to Nexus
#
# Sample usage: ./npmw install express --save

DIR=$(dirname `readlink -f ${BASH_SOURCE[0]}`)
INSTALL_PATH="$DIR/bin/node"
INSTALL_VERSION=$NODEW_INSTALL_VERSION
DIST_BASE_URL=$NODEW_DIST_BASE_URL

# default version if not set
if [[ -z "$INSTALL_VERSION" ]]; then
  INSTALL_VERSION="6.10.3";
fi

# default download location if not set
if [[ -z "$DIST_BASE_URL" ]]; then
  DIST_BASE_URL="http://nodejs.org/dist";
fi

# create the install directory
if [ ! -d "$INSTALL_PATH" ]; then
  echo "Creating directory: $INSTALL_PATH"
  mkdir -p "$INSTALL_PATH"
fi

# calculate the absolute path of the location to install files
cd $INSTALL_PATH
INSTALL_PATH=`pwd`
cd - > /dev/null

# identify the OS architecture to download the correct binary
MACHINE_TYPE=`uname -m`
if [ ${MACHINE_TYPE} == 'x86_64' ]; then
  MACHINE_ARCH="linux-x64"
else
  MACHINE_ARCH="linux-x86"
fi

# fetch the desired version of node if we don't have a cached version copy
VERSION_FOLDER="node-v$INSTALL_VERSION-$MACHINE_ARCH"
FULL_PATH="$INSTALL_PATH/$VERSION_FOLDER"
if [ ! -d $FULL_PATH ]; then
  echo "Fetching Node $INSTALL_VERSION to $INSTALL_PATH/node.tar.gz";
  wget -O $INSTALL_PATH/node.tar.gz $DIST_BASE_URL/v$INSTALL_VERSION/$VERSION_FOLDER.tar.gz
  tar xzf $INSTALL_PATH/node.tar.gz -C $INSTALL_PATH/
  rm $INSTALL_PATH/node.tar.gz
fi

# start the npm executable
export PATH=$FULL_PATH/bin:$PATH
npm "$@"
